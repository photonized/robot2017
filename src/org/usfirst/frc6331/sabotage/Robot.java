// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc6331.sabotage;

import java.io.Console;

import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Victor;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * 
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 * @author Vlad
 * 
 */
public class Robot extends IterativeRobot {

    Joystick driveStick = new Joystick(0);
    //Joystick shootStick = new Joystick(2);
    //RobotDrive mainDrive = new RobotDrive(1, 2, 3, 4);
   
    Victor leftBackDrive = new Victor(0);
    Victor leftFrontDrive = new Victor(1);
    Victor rightFrontDrive = new Victor(3);
    Victor rightBackDrive = new Victor(2);
    Victor basketMotor = new Victor(4);
    Victor liftGate = new Victor(5);
    Victor climber = new Victor(6);
    Victor winch = new Victor(7);
    DigitalInput bottomGateSwitch1 = new DigitalInput(0);
    DigitalInput topGateSwitch1 = new DigitalInput(1);
    DigitalInput bottomScissorSwitch1 = new DigitalInput(2);
    DigitalInput topScissorSwitch1 = new DigitalInput(3);
    
    int GateDirections = 0; //0 = off, 1 = up, 2 = down;    
    
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
    	CameraServer.getInstance().startAutomaticCapture();
    	CameraServer.getInstance().startAutomaticCapture();
    }
    
    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
    	
    	//double CurrLeftTrigger;
    	double CurrRightTrigger;
    	double CurrLeftTrigger;
    	double CurrLeft;
    	double CurrRight;
    	//double DriveSpeedBase;
    	double DriveSpeedMuli;
    	
    	//DriveSpeedBase = 2.5;
    	
    	CurrRight = driveStick.getRawAxis(5);
    	CurrLeft = driveStick.getRawAxis(1);
    	
    	CurrRightTrigger = driveStick.getRawAxis(3);
    	CurrLeftTrigger = driveStick.getRawAxis(2);
    	
    	DriveSpeedMuli = 0;
    	
    	if(CurrRightTrigger > 0)
    	{
    		DriveSpeedMuli = (CurrRightTrigger);
    	
    		//DriveSpeedMuli = DriveSpeedBase - DriveSpeedMuli;
    	}
    	
    	if(CurrLeftTrigger > 0)
    	{
    		DriveSpeedMuli = -CurrLeftTrigger;
    	
    	}
    	
    	boolean abutton = driveStick.getRawButton(1);
    	boolean bbutton = driveStick.getRawButton(2);
    	boolean xbutton = driveStick.getRawButton(3);
    	boolean ybutton = driveStick.getRawButton(4);
    	boolean leftBump = driveStick.getRawButton(5);
    	boolean rightBump = driveStick.getRawButton(6);
    	int dPad = driveStick.getPOV();
    	
    	SmartDashboard.putString("CurrRight", Double.toString(CurrRight));
    	SmartDashboard.putString("CurrLeft", Double.toString(CurrLeft));
    	SmartDashboard.putString("CurrRightTrigger", Double.toString(CurrRightTrigger));
    	SmartDashboard.putString("DriveSpeedMuli", Double.toString(DriveSpeedMuli));
    	
    	
    	double liftMotor = 0.0;
    	double winchMotor = 0.0;
    	double gateMotor = 0.0;
    	//DigitalInput di1 = new DigitalInput(1);
    	//DigitalInput di2 = new DigitalInput(2);
    	
    	boolean bottomGateSwitch2 = true;
    	boolean topGateSwitch2 = true;
    	boolean bottomScissorSwitch2 = true;
    	boolean topScissorSwitch2 = true;
    	
    	bottomGateSwitch2 = !bottomGateSwitch1.get();
    	topGateSwitch2 = !topGateSwitch1.get();
    	bottomScissorSwitch2 = !bottomScissorSwitch1.get();
    	topScissorSwitch2 = !topScissorSwitch1.get();
    	
    	/*
    	if(bottomGateSwitch1.get()) { bottomGateSwitch2 = false;}
    	else {bottomGateSwitch2 = true;}
    	if(topGateSwitch1.get()) { topGateSwitch2 = false;}
    	else {topGateSwitch2 = true;}
    	if(bottomScissorSwitch1.get()) { bottomScissorSwitch2 = false;}
    	else {bottomScissorSwitch2 = true;}
    	if(topScissorSwitch1.get()) { topScissorSwitch2 = false;}
    	else {topScissorSwitch2 = true;}
    	*/
    	
    	
    	
    	
    	
    	
    	if(rightBump) {
    		winchMotor = 1.0;
    		SmartDashboard.putString("Right Bumper", "on");
    	}
    	
    	//******************************Scissor Logic***********************************
    	
    	if(bbutton)
    	{
    		liftMotor = -0.8;
    		SmartDashboard.putString("B Button", "on");
    	}
    	
    	if(abutton) {
    		liftMotor = 0.8;
    		SmartDashboard.putString("A Button", "on");
    	}
    	
    	/*if(bottomScissorSwitch2 && ScissoDirections == 2)
    	{
    		ScissoDirections = 0;
    	}
    	
    	if(topScissorSwitch2 && ScissoDirections == 1)
    	{
    		ScissoDirections = 0;
    	}
    	
    	if (ScissoDirections !=  0)
    	{
    		if(ScissoDirections == 1)
    		{
    			liftMotor = -0.8;
    		}
    		
    		if(ScissoDirections == 2)
    		{
    			liftMotor = 0.8;
    		}
    	}
    	else
    	{
    		liftMotor = 0;
    	}*/
    	
    	if(dPad == 0) {
    		winchMotor = 0.6;
    	} else {
    		winchMotor = 0.0;
    	}
    	
    	if(dPad == 180) {
    		winchMotor = -0.6;
    	} else {
    		winchMotor = 0.0;
    	}
    	
    	
    	
    	
    	//***************************************************************************************
    	
    	//******************************Gate Logic***********************************
    	
    	if(xbutton) {
    		gateMotor = 0.5;
    		SmartDashboard.putString("X Button", "on");
    	}
    	
    	if(ybutton){ 
    		gateMotor = -0.5;
    		SmartDashboard.putString("Y Button", "on");
    	}
    
    	
    	//*******************************************************************************
    	
    	/*
    		liftMotor = 20.0 ;
    	*/
    		
    	double leftMotorValue =  0.0;
    	double rightMotorValue =  0.0;
    	double driveSpeed = 0.;
    	
    	//enclose the 2 if statements below into 1 if statement that reads
    	//if leftjoystick x is between 0.1 and -0.1 do NOTHING
    	
    	//if (driveStick.getRawAxis(0) > 0.1 || driveStick.getRawAxis(0) < -0.1)
    	//{
    		if(DriveSpeedMuli > 0)
    		{
    			//leftStickValue = (driveStick.getRawAxis(1)/DriveSpeedMuli) * driveSpeed;
    			//rightStickValue = (driveStick.getRawAxis(5)/DriveSpeedMuli) * driveSpeed;
    			rightMotorValue = (DriveSpeedMuli - (driveStick.getRawAxis(0) * 0.5))*0.5;
    			leftMotorValue = (DriveSpeedMuli + (driveStick.getRawAxis(0) * 0.5))*0.5;
    			rightMotorValue *= -driveSpeed;
    			leftMotorValue *= -driveSpeed;
    		}
    		else if(DriveSpeedMuli < 0)
    		{
    			rightMotorValue = (DriveSpeedMuli - (driveStick.getRawAxis(0)* 0.5))*0.5;
    			leftMotorValue = (DriveSpeedMuli + (driveStick.getRawAxis(0) * 0.5))*0.5;
    			rightMotorValue *= -driveSpeed;
    			leftMotorValue *= -driveSpeed;
    		}
    	//}
    	
    	/*if((CurrLeft > .80 & CurrRight > .80) || (CurrLeft < -.80 & CurrRight < -.80))
    	{
    		leftStickValue = driveStick.getRawAxis(1)/.5;
    		rightStickValue = driveStick.getRawAxis(5)/.5;
    	}
    	else
    	{
    		leftStickValue = driveStick.getRawAxis(1)/2.0;
    		rightStickValue = driveStick.getRawAxis(5)/2.0;
    	}
    	/*
        /*mainDrive.mecanumDrive_Cartesian(driveStick.getAxis(Joystick.AxisType.kX),
        driveStick.getAxis(Joystick.AxisType.kY),
        driveStick.getAxis(Joystick.AxisType.kZ), 0);
        mainDrive.tankDrive(driveStick,driveStick );*/
    	/*
    	SmartDashboard.putString("DB/String 0", "leftstick:" + Double.toString(leftStickValue));
    	SmartDashboard.putString("DB/String 1", "right stick:" + Double.toString(rightStickValue));
    	SmartDashboard.putString("DB/String 2", "lift:" + Double.toString(liftMotor));
    	SmartDashboard.putString("DB/String 3", "gate:" + Double.toString(gateMotor));
    	*/
    	
    	leftFrontDrive.set(-leftMotorValue);
    	leftBackDrive.set(-leftMotorValue);
    	rightFrontDrive.set(rightMotorValue);
    	rightBackDrive.set(rightMotorValue);
    	basketMotor.set(liftMotor);
    	liftGate.set(gateMotor);
    	climber.set(winchMotor);
    }
      
}
